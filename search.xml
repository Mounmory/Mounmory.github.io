<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个计算正多边形边长问题（多态+模板）</title>
      <link href="/C++%E7%AC%94%E8%AE%B0_%E5%A4%9A%E6%80%81+%E6%A8%A1%E6%9D%BF%E4%BE%8B%E5%AD%90/"/>
      <url>/C++%E7%AC%94%E8%AE%B0_%E5%A4%9A%E6%80%81+%E6%A8%A1%E6%9D%BF%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>0 概述</p><p>​        在入行C++开发一年的时候，看到过一个求正多边形的周长的问题，当时只想到使用多态进行解决，后来看了一些关于模板编程的书，想到这个问题，便有了新的解法。</p><p>1 使用多态解决</p><p>​        基本思路就是创建一个Shape基类，定义一个求周长的纯虚函数，然后分别定义派生自Shape的正三角形、正四边形…，具体实现基类的接口，再创建一个工厂函数，根据边长（int枚举或string枚举）创建指向各种派生类的基类指针。</p><p>​        这个解法的问题在于对于每种正多边形，都要实作出一个派生类，而计算公式都是边长x边数，不够简洁。</p><p>2 多态+模板</p><p>​        由于所有正多边形周长计算公式都一样，因此创建一个正多边形类，包含一个边长的成员变量，使用边数作为模板参数，代码将变得非常精简。</p><p>2.1 形状基类</p><p>​        创建一个抽象形状基类 CBaseShape，类中有一个获取周长的纯虚函数，如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CBaseShape</span> <span class="comment">//形状基类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CBaseShape</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">CBaseShape</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">const</span> <span class="type">float</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">//计算周长接口</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.2 定义正多边形模板类</p><p>​        正多边形模板类CRegualrPolygon，继承CBaseShape，使用一个int模板参数表示边数，有两个成员变量表示边数和边长，并实现计算周长的接口，实作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">uint16_t</span> _EdgeNum&gt;<span class="comment">//模板参数为边的数量</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRegualrPolygon</span> : <span class="keyword">public</span> CBaseShape <span class="comment">//正多变形类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">static_assert</span>(_EdgeNum &gt;= <span class="number">3</span>, <span class="string">&quot;edge num at least 3!&quot;</span>);<span class="comment">//在编译器检查边数量最少为3个</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CRegualrPolygon</span>(<span class="type">float</span> fEdgeLen = <span class="number">1.0f</span>)</span><br><span class="line">: <span class="built_in">CBaseShape</span>()</span><br><span class="line">, <span class="built_in">m_usEdgeNum</span>(_EdgeNum)</span><br><span class="line">, <span class="built_in">m_fEdgeLen</span>(fEdgeLen)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">CRegualrPolygon</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">uint16_t</span> <span class="title">getEdgeNum</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_usEdgeNum; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setEdgeLen</span><span class="params">(<span class="type">float</span> fEdgeLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fEdgeLen &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">exception</span>(<span class="string">&quot;invalid edge len.&quot;</span>);</span><br><span class="line">m_fEdgeLen = fEdgeLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">getEdgeLen</span><span class="params">()</span> </span>&#123; m_fEdgeLen; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">const</span> <span class="type">float</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> m_fEdgeLen * <span class="built_in">float</span>(m_usEdgeNum); &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> m_usEdgeNum;<span class="comment">//边数量</span></span><br><span class="line"><span class="type">float</span> m_fEdgeLen;<span class="comment">//边长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​        代码中边数成员变量m_usEdgeNum定义为const，在构造函数中使用模板参数进行初始化。使用静态断言static_assert在编译期检查模板参数是否合法。除此之外，还定义了set&#x2F;getEdgeLen接口操作边长，getEdgeNum获取边数接口。</p><p>2.3 形状工厂类</p><p>​        形状工厂类CShapeFactory使用工厂设计模式，用于生成具体形对象，返回基类对象指针，实作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Base = CBaseShape&gt;<span class="comment">//模板参数为指向创建对象的基类指针，默认CBaseShape</span></span><br><span class="line"><span class="keyword">class</span> CShapeFactory <span class="comment">//形状类工厂</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">uint16_t</span> _EdgeNum&gt;<span class="comment">//模板参数为边的数量</span></span><br><span class="line"><span class="type">static</span> std::shared_ptr&lt;_Base&gt; <span class="built_in">CreateRegularPolygon</span>(<span class="type">float</span> edgeLen) <span class="comment">//edgeLen：边长</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> std::make_shared&lt;CRegualrPolygon&lt;_EdgeNum&gt;&gt;(edgeLen);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​        形状工厂类仍然为模板类，模板参数为返回的基类类型_Base，这里默认为CBaseShape，在类内定义静态模板成员函数，用于产生具体的正多边形对象。</p><p>2.4 测试</p><p>​        这样就能够在代码中，使用不同的模板参数产生不同的正多边形对象了，测试代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//auto polo2 = CShapeFactory&lt;&gt;::CreateRegularPolygon&lt;2&gt;(4.5);//编译失败，正2多边形非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> polo5 = CShapeFactory&lt;&gt;::<span class="built_in">CreateRegularPolygon</span>&lt;<span class="number">6</span>&gt;(<span class="number">4.5</span>);<span class="comment">//创建一个正5边形实例</span></span><br><span class="line">std::cout &lt;&lt; polo5-&gt;<span class="built_in">getPerimeter</span>() &lt;&lt; std::endl;<span class="comment">//计算正5变形边长</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入任意字符继续...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 完整代码</p><p>​        完整代码如下，若有更好的思路，欢迎交流讨论</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBaseShape</span> <span class="comment">//形状基类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CBaseShape</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">CBaseShape</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">const</span> <span class="type">float</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">//计算周长接口</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">uint16_t</span> _EdgeNum&gt;<span class="comment">//模板参数为边的数量</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRegualrPolygon</span> : <span class="keyword">public</span> CBaseShape <span class="comment">//正多变形类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">static_assert</span>(_EdgeNum &gt;= <span class="number">3</span>, <span class="string">&quot;edge num at least 3!&quot;</span>);<span class="comment">//在编译器检查边数量最少为3个</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CRegualrPolygon</span>(<span class="type">float</span> fEdgeLen = <span class="number">1.0f</span>)</span><br><span class="line">: <span class="built_in">CBaseShape</span>()</span><br><span class="line">, <span class="built_in">m_usEdgeNum</span>(_EdgeNum)</span><br><span class="line">, <span class="built_in">m_fEdgeLen</span>(fEdgeLen)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">CRegualrPolygon</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">uint16_t</span> <span class="title">getEdgeNum</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_usEdgeNum; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setEdgeLen</span><span class="params">(<span class="type">float</span> fEdgeLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fEdgeLen &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">exception</span>(<span class="string">&quot;invalid edge len.&quot;</span>);</span><br><span class="line">m_fEdgeLen = fEdgeLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">getEdgeLen</span><span class="params">()</span> </span>&#123; m_fEdgeLen; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">const</span> <span class="type">float</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> m_fEdgeLen * <span class="built_in">float</span>(m_usEdgeNum); &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> m_usEdgeNum;<span class="comment">//边数量</span></span><br><span class="line"><span class="type">float</span> m_fEdgeLen;<span class="comment">//边长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Base = CBaseShape&gt;<span class="comment">//模板参数为指向创建对象的基类指针，默认CBaseShape</span></span><br><span class="line"><span class="keyword">class</span> CShapeFactory <span class="comment">//形状类工厂</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">uint16_t</span> _EdgeNum&gt;<span class="comment">//模板参数为边的数量</span></span><br><span class="line"><span class="type">static</span> std::shared_ptr&lt;_Base&gt; <span class="built_in">CreateRegularPolygon</span>(<span class="type">float</span> edgeLen) <span class="comment">//edgeLen：边长</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> std::make_shared&lt;CRegualrPolygon&lt;_EdgeNum&gt;&gt;(edgeLen);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//auto polo2 = CShapeFactory&lt;&gt;::CreateRegularPolygon&lt;2&gt;(4.5);//编译失败，正2多边形非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> polo5 = CShapeFactory&lt;&gt;::<span class="built_in">CreateRegularPolygon</span>&lt;<span class="number">6</span>&gt;(<span class="number">4.5</span>);<span class="comment">//创建一个正5边形实例</span></span><br><span class="line">std::cout &lt;&lt; polo5-&gt;<span class="built_in">getPerimeter</span>() &lt;&lt; std::endl;<span class="comment">//计算正5变形边长</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入任意字符继续...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++笔记 </category>
          
          <category> 多态 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多态 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creo二次开发ProTookit安装及帮助文档配置</title>
      <link href="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="0-概述"><a href="#0-概述" class="headerlink" title="0 概述"></a>0 概述</h4><p>​文章介绍了Creo二次开发安装包安装事项、二次开发帮助文档环境配置和打开方法。</p><h4 id="1-安装包"><a href="#1-安装包" class="headerlink" title="1 安装包"></a>1 安装包</h4><ul><li>Creo4.0 M010</li><li>Visual Studio 2015</li><li>jdk1.6 32位</li></ul><h4 id="2-ProTookit安装"><a href="#2-ProTookit安装" class="headerlink" title="2 ProTookit安装"></a>2 ProTookit安装</h4><h5 id="2-1-Creo-Parametric-Tookit模块。"><a href="#2-1-Creo-Parametric-Tookit模块。" class="headerlink" title="2.1 Creo Parametric Tookit模块。"></a>2.1 Creo Parametric Tookit模块。</h5><p>​按照下图选择</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025150258743.png" alt="image-20241025150258743"></p><h5 id="2-2-PTC-View模块"><a href="#2-2-PTC-View模块" class="headerlink" title="2.2 PTC View模块"></a>2.2 PTC View模块</h5><p>​安装Creo Thumbnail Viewer 和Creo View Express模块（我这里安装过了），可以在二次开发窗口使用模式显示组件。</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025150524032.png" alt="image-20241025150524032"></p><h4 id="3-Java环境安装"><a href="#3-Java环境安装" class="headerlink" title="3 Java环境安装"></a>3 Java环境安装</h4><h5 id="3-1-JDK、JRE安装"><a href="#3-1-JDK、JRE安装" class="headerlink" title="3.1 JDK、JRE安装"></a>3.1 JDK、JRE安装</h5><p>​打开ProTookit帮助文档（在Creo安装路径：protoolkit\protkdoc\IENoSwing.html），显示不可用，需要安装JDK（<font color=red>一定要是32位的</font>）。</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025092337591.png" alt="image-20241025092506646"></p><p>​双击安装文件，弹出安装界面，先安装JDK</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025140839707.png" alt="image-20241025140839707"></p><p>​我这里用的默认安装，一路下一步。</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025141013053.png" alt="image-20241025141013053"></p><p>​完成后弹出安装JRE选项，还是默认，一路下一步，直到完成。</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025141210263.png" alt="image-20241025141210263"></p><h5 id="3-2-配置系统环境变量"><a href="#3-2-配置系统环境变量" class="headerlink" title="3.2 配置系统环境变量"></a>3.2 配置系统环境变量</h5><p>​在桌面上“我的电脑”上右键-&gt;属性-&gt;高级系统设置-&gt;环境变量</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025141819385.png" alt="image-20241025141819385"></p><p>​新建系统变量“JAVA_HOME”，如图所示</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025142019354.png" alt="image-20241025142019354"></p><p>​选择“Path”，编辑，新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025142345247.png" alt="image-20241025142345247"></p><p>​在控制台输入java -version，有如下信息就说明成功了。</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025142806406.png" alt="image-20241025142806406"></p><h4 id="4-帮助文档使用"><a href="#4-帮助文档使用" class="headerlink" title="4 帮助文档使用"></a>4 帮助文档使用</h4><p>​选择帮助文档文件，<font color=red>必须使用IE浏览器打开</font></p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025144023719.png" alt="image-20241025144023719"></p><p>​在网页中选择”允许阻止的内容“</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025143748422.png" alt="image-20241025143748422"></p><p>​弹出下图的更新栏，点击“此次运行”，<font color=red>千万不要点更新</font></p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025144225954.png" alt="image-20241025144225954"></p><p>​然后就可以愉快的使用了，点击“Find”，弹出搜索框。</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025144419954.png" alt="image-20241025144419954"></p><h4 id="5-其它问题"><a href="#5-其它问题" class="headerlink" title="5 其它问题"></a>5 其它问题</h4><h5 id="5-1-html文档默认使用Edge浏览器打开问题"><a href="#5-1-html文档默认使用Edge浏览器打开问题" class="headerlink" title="5.1 html文档默认使用Edge浏览器打开问题"></a>5.1 html文档默认使用Edge浏览器打开问题</h5><p>​现在微软默认使用Edge浏览器，有些情况帮助文档即使选择使用IE打开，打开后仍然是Edge。需要在Edge里将文档添加到IE模式中，有效期貌似只有一个月。</p><p><img src="/ProTookit_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20241025145044645.png" alt="image-20241025145044645"></p>]]></content>
      
      
      <categories>
          
          <category> ProTookit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ProTookit Creo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多态中，基类的析构函数还有必要为虚函数吗</title>
      <link href="/C++%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%B1%BB%E7%9A%84%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E6%8E%A2%E8%AE%A8/"/>
      <url>/C++%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%B1%BB%E7%9A%84%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E6%8E%A2%E8%AE%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="0-概述"><a href="#0-概述" class="headerlink" title="0 概述"></a>0 概述</h4><p>​        《Effective C++》建议将基类的析构函数设置为虚函数，这样可以避免当基类指针指向派生类时，在delete基类指针时，派生类析构函数没有被调用，结果是未定义的，造成资源泄露。</p><p>​        《Modern C++ Design》中提到，基类虚析构函数定义将产生虚函数表，对像大小产生额外的开销。因此若不需要用到多态、不直接创建基类对象实例，为此可以将基类析构函数定义为protected，这样就无法直接delete基类指针了。</p><p>​因此写了些代码测试验证了下。</p><h4 id="1-代码测试"><a href="#1-代码测试" class="headerlink" title="1 代码测试"></a>1 代码测试</h4><h5 id="1-1-代码说明"><a href="#1-1-代码说明" class="headerlink" title="1.1 代码说明"></a>1.1 代码说明</h5><p>​        使用下面的代码进行测试，使用gcc和vs两种编译器编译。</p><p>​        代码中定义了四个类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VirBase</span>;<span class="comment">//基类为虚析构函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirDerived</span>;<span class="comment">//基类为虚析构函数的派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoneVBase</span>;<span class="comment">//基类无虚析构函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoneVDerived</span>;<span class="comment">//基类无虚析构函数的派生类</span></span><br></pre></td></tr></table></figure><p>​        进行了5组形式对象生成测试</p><ul><li>非指针对象构造和析构</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VirBase vb;</span><br><span class="line">VirDerived vde;</span><br><span class="line">NoneVBase nvb;</span><br><span class="line">NoneVDerived nvde;</span><br></pre></td></tr></table></figure><ul><li>基类为虚析构函数原生指针构造和析构</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VirBase* pToBase = <span class="keyword">new</span> VirBase;</span><br><span class="line">VirBase* pToDev = <span class="keyword">new</span> VirDerived;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pToDev;</span><br><span class="line"><span class="keyword">delete</span> pToBase;</span><br></pre></td></tr></table></figure><ul><li>基类为非虚析构函数原生指针构造和析构</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NoneVBase* pToBase = <span class="keyword">new</span> NoneVBase;</span><br><span class="line">NoneVBase* pToDev = <span class="keyword">new</span> NoneVDerived;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pToDev;</span><br><span class="line"><span class="keyword">delete</span> pToBase;</span><br></pre></td></tr></table></figure><ul><li>基类为虚析构函数独享智能指针（unique_ptr）构造和析构</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;VirBase&gt; pToBase = std::<span class="built_in">make_unique</span>&lt;VirBase&gt;();</span><br><span class="line">std::unique_ptr&lt;VirBase&gt; pToDev = std::<span class="built_in">make_unique</span>&lt;VirDerived&gt;();</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">pToDev.<span class="built_in">reset</span>();</span><br><span class="line">pToBase.<span class="built_in">reset</span>();</span><br></pre></td></tr></table></figure><ul><li>基类为虚析构函数共享智能指针（shared_ptr）构造和析构</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;NoneVBase&gt; pToBase = std::<span class="built_in">make_shared</span>&lt;NoneVBase&gt;();</span><br><span class="line">std::shared_ptr&lt;NoneVBase&gt; pToDev = std::<span class="built_in">make_shared</span>&lt;NoneVDerived&gt;();</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">pToDev.<span class="built_in">reset</span>();</span><br><span class="line">pToBase.<span class="built_in">reset</span>();</span><br></pre></td></tr></table></figure><h5 id="1-2-完整代码如下"><a href="#1-2-完整代码如下" class="headerlink" title="1.2 完整代码如下"></a>1.2 完整代码如下</h5><p>​        输出的日志比较多，不过认真看还是能够识别的。<strong>代码中还增加了对基类指针的运行期识别进行了测试。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirBase</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">VirBase</span>() </span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;virtual base construct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">VirBase</span>() </span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;virtual base destruct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_lBaseValue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirDerived</span> :<span class="keyword">public</span> VirBase </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">VirDerived</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;virtual derived construct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">VirDerived</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;virtual derived destruct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_lDevValue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoneVBase</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">NoneVBase</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;none virtual base construct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如果将析构函数更改为protect,将无法构造基类对象实例*/</span></span><br><span class="line"><span class="comment">//protected:</span></span><br><span class="line">~<span class="built_in">NoneVBase</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;none virtual base destruct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_lBaseValue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoneVDerived</span> :<span class="keyword">public</span> NoneVBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">NoneVDerived</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;none virtual derived construct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">NoneVDerived</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;none virtual derived destruct...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_lDevValue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;-----     0      -------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;none pointer test&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#123;</span><br><span class="line">VirBase vb;</span><br><span class="line">VirDerived vde;</span><br><span class="line">NoneVBase nvb;</span><br><span class="line">NoneVDerived nvde;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of VirBase class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(vb) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of VirDerived class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(vde) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of NoneVBase class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(nvb) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of NoneVDerived class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(nvde) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;-----     1      -------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--origin pointer test---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--test virtual base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">VirBase* pToBase = <span class="keyword">new</span> VirBase;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">VirBase* pToDev = <span class="keyword">new</span> VirDerived;</span><br><span class="line"></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;size of base dereference base class &quot; &lt;&lt; sizeof(*pToBase) &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;size of derived dereference base class &quot; &lt;&lt; sizeof(*pToDev) &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;size of derived dereference derived class &quot; &lt;&lt; sizeof(*static_cast&lt;VirDerived*&gt;(pToDev)) &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">typeid</span>(*pToBase) == <span class="built_in">typeid</span>(*pToDev))</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is equal to base!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is not equal to base!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">delete</span> pToDev;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">delete</span> pToBase;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;-----     2      -------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--origin pointer test---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--test none virtual base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">NoneVBase* pToBase = <span class="keyword">new</span> NoneVBase;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">NoneVBase* pToDev = <span class="keyword">new</span> NoneVDerived;</span><br><span class="line"></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;size of base dereference base class &quot; &lt;&lt; sizeof(*pToBase) &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;size of derived dereference base class &quot; &lt;&lt; sizeof(*pToDev) &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;size of derived dereference derived class &quot; &lt;&lt; sizeof(*(static_cast&lt;NoneVDerived*&gt;(pToDev))) &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">typeid</span>(*pToBase) == <span class="built_in">typeid</span>(*pToDev))</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is equal to derived!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is not equal to derived!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">delete</span> pToDev;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">delete</span> pToBase;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;-----     3      -------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--smart pointer test---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--test virtual base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::unique_ptr&lt;VirBase&gt; pToBase = std::<span class="built_in">make_unique</span>&lt;VirBase&gt;();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::unique_ptr&lt;VirBase&gt; pToDev = std::<span class="built_in">make_unique</span>&lt;VirDerived&gt;();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of shared_ptr base dereference base class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(pToBase) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of shared_ptr derived dereference base class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(pToDev) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">typeid</span>(*pToBase) == <span class="built_in">typeid</span>(*pToDev))</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is equal to base!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is not equal to base!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">pToDev.<span class="built_in">reset</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">pToBase.<span class="built_in">reset</span>();</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;-----     4      -------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--smart pointer test---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--test none virtual base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;test virtual base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::shared_ptr&lt;NoneVBase&gt; pToBase = std::<span class="built_in">make_shared</span>&lt;NoneVBase&gt;();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;new derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::shared_ptr&lt;NoneVBase&gt; pToDev = std::<span class="built_in">make_shared</span>&lt;NoneVDerived&gt;();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of shared_ptr base dereference base class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(pToBase) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size of shared_ptr derived dereference base class &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(pToDev) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">typeid</span>(*pToBase) == <span class="built_in">typeid</span>(*pToDev))</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is equal to base!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type id base is not equal to base!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete derived&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">pToDev.<span class="built_in">reset</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete base&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">pToBase.<span class="built_in">reset</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入任意字符继续...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-运行结果"><a href="#1-3-运行结果" class="headerlink" title="1.3 运行结果"></a>1.3 运行结果</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">-----     0      -------</span><br><span class="line">none pointer test</span><br><span class="line">virtual base construct...</span><br><span class="line">virtual base construct...</span><br><span class="line">virtual derived construct...</span><br><span class="line">none virtual base construct...</span><br><span class="line">none virtual base construct...</span><br><span class="line">none virtual derived construct...</span><br><span class="line">size of VirBase class 16</span><br><span class="line">size of VirDerived class 24</span><br><span class="line">size of NoneVBase class 4</span><br><span class="line">size of NoneVDerived class 8</span><br><span class="line">none virtual derived destruct...</span><br><span class="line">none virtual base destruct...</span><br><span class="line">none virtual base destruct...</span><br><span class="line">virtual derived destruct...</span><br><span class="line">virtual base destruct...</span><br><span class="line">virtual base destruct...</span><br><span class="line">-----     1      -------</span><br><span class="line">--origin pointer test---</span><br><span class="line">--test virtual base</span><br><span class="line">new base</span><br><span class="line">virtual base construct...</span><br><span class="line">new derived</span><br><span class="line">virtual base construct...</span><br><span class="line">virtual derived construct...</span><br><span class="line">type id base is not equal to base!</span><br><span class="line">delete derived</span><br><span class="line">virtual derived destruct...</span><br><span class="line">virtual base destruct...</span><br><span class="line">delete base</span><br><span class="line">virtual base destruct...</span><br><span class="line">-----     2      -------</span><br><span class="line">--origin pointer test---</span><br><span class="line">--test none virtual base</span><br><span class="line">new base</span><br><span class="line">none virtual base construct...</span><br><span class="line">new derived</span><br><span class="line">none virtual base construct...</span><br><span class="line">none virtual derived construct...</span><br><span class="line">type id base is equal to derived!</span><br><span class="line">delete derived</span><br><span class="line">none virtual base destruct...</span><br><span class="line">delete base</span><br><span class="line">none virtual base destruct...</span><br><span class="line">-----     3      -------</span><br><span class="line">--smart pointer test---</span><br><span class="line">--test virtual base</span><br><span class="line">new base</span><br><span class="line">virtual base construct...</span><br><span class="line">new derived</span><br><span class="line">virtual base construct...</span><br><span class="line">virtual derived construct...</span><br><span class="line">size of shared_ptr base dereference base class 8</span><br><span class="line">size of shared_ptr derived dereference base class 8</span><br><span class="line">type id base is not equal to base!</span><br><span class="line">delete derived</span><br><span class="line">virtual derived destruct...</span><br><span class="line">virtual base destruct...</span><br><span class="line">delete base</span><br><span class="line">virtual base destruct...</span><br><span class="line">-----     4      -------</span><br><span class="line">--smart pointer test---</span><br><span class="line">--test none virtual base</span><br><span class="line">test virtual base</span><br><span class="line">new base</span><br><span class="line">none virtual base construct...</span><br><span class="line">new derived</span><br><span class="line">none virtual base construct...</span><br><span class="line">none virtual derived construct...</span><br><span class="line">size of shared_ptr base dereference base class 16</span><br><span class="line">size of shared_ptr derived dereference base class 16</span><br><span class="line">type id base is equal to base!</span><br><span class="line">delete derived</span><br><span class="line">none virtual derived destruct...</span><br><span class="line">none virtual base destruct...</span><br><span class="line">delete base</span><br><span class="line">none virtual base destruct...</span><br><span class="line">输入任意字符继续...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-结论"><a href="#2-结论" class="headerlink" title="2 结论"></a>2 结论</h4><ul><li><p>在C++11中，使用基类智能指针指向派生类对象，基类不定义虚析构函数不影响派生类析构函数的调用。但智能指针也会有额外的内存开销，shared_ptr（有引用计数）开销比unique_ptr大。</p></li><li><p>当需要进行运行期识别（typeid）操作基类指针指向对象，需要将基类析构函数定义为虚函数。</p></li><li><p>通过delete删除指向派生类对象的基类指针，需要将基类析构函数定义为虚函数。</p></li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> C++笔记 </category>
          
          <category> 多态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多态 </tag>
            
            <tag> 虚析构函数 </tag>
            
            <tag> Effective C++ </tag>
            
            <tag> typeid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 和 VS Code 常用快捷键</title>
      <link href="/%E9%9A%8F%E7%AC%94_VS%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/%E9%9A%8F%E7%AC%94_VS%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h3><ul><li>折叠所有代码</li></ul><p>​Ctrl + M + O</p><ul><li>展开所有代码</li></ul><p>​Ctrl + M + L</p><ul><li>自动编排代码格式</li></ul><p>​Ctrl + K 、Ctrl + D</p><ul><li>跳转到指定行</li></ul><p>​Ctrl + G 然后输入行号</p><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><ul><li>折叠代码</li></ul><p>​Ctrl + Shift + [</p><ul><li>展开代码</li></ul><p>​Ctrl + Shift + ]</p><ul><li>自动编排代码格式</li></ul><p>​Ctrl + Shift + P（在Windows和Linux上）</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
